#!/usr/bin/env python

import argparse
import datetime
import json
import os
import os.path
import shutil
import subprocess
import tempfile

import lxml.etree
import lxml.html


SCRIPTS_DIR = os.path.dirname(os.path.abspath(__file__))
ROOT_DIR = os.path.dirname(SCRIPTS_DIR)


class Chdir():

  def __init__(self, path):
    self._path = os.path.abspath(path)

  def __enter__(self):
    self._previous = os.getcwd()
    os.chdir(self._path)

  def __exit__(self, exc_type, exc_val, exc_tb):
    os.chdir(self._previous)


def git_sha(repository):
  with Chdir(repository):
    return subprocess.check_output(["git", "rev-parse", "HEAD"]).strip()


def extract_javascript(html, root):
  scripts = ""
  transactions = html.xpath("//script[@type='text/javascript']")
  for transaction in transactions:
    src = os.path.join(root, transaction.get("src"))
    with open(src) as script:
      scripts = scripts + "\n" + script.read()
    transaction.drop_tree()

  filtered = ""
  for line in scripts.split("\n"):
    if line.find('"use strict";') != 0:
      filtered = filtered + "\n" + line

  return filtered


def extract_tags(html, tag, key, root):
  scripts = ""
  transactions = html.xpath(tag)
  for transaction in transactions:
    src = os.path.join(root, transaction.get(key))
    with open(src) as script:
      scripts = scripts + "\n" + script.read()
    transaction.drop_tree()
  return scripts


def build_javascript_files(root, files):
  result = ""
  for file in [os.path.join(root, file) for file in files]:
    with open(file, 'r') as f:
      result = result + "\n" + f.read();
  return result


def append_javascript(html, script):
  body = html.find('body')
  source = "<script type='text/javascript' type='text/css'>" + script + "</script>"
  link = lxml.html.fromstring(source).find('.//script')
  body.append(link)


def append_style(html, style):
  head = html.find('head')
  tag = "<style>" + style + "</style>"
  style = lxml.html.fromstring(tag).find('.//style')
  head.append(style)


def yuicompressor(contents, suffix):
  temp = tempfile.mktemp(suffix=suffix)
  with open(temp, 'w') as f:
    f.write(contents)
  output = subprocess.check_output(['yuicompressor', temp])
  os.unlink(temp)
  return output


def htmlcompressor(contents):
  p = subprocess.Popen(['htmlcompressor'], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
  output = p.communicate(input=contents)[0]
  return output


def pngcrush(source_file, destination_file):
  print "Crushing '%s'..." % source_file
  subprocess.check_call(['pngcrush', source_file, destination_file])


def find_files(directory):
  result = []
  for root, subdirs, files in os.walk(directory):
    for file in files:
      if file.find('.') != 0:
        result.append(os.path.relpath(os.path.join(root, file), directory))
  return result


def copy_diretory(source_dir, output_dir, task=shutil.copy):
  name = os.path.basename(os.path.abspath(source_dir))
  destination_dir = os.path.join(output_dir, name)
  os.mkdir(destination_dir)
  files = find_files(source_dir)
  for file in files:
    image_name = os.path.basename(os.path.abspath(file))
    destination_file = os.path.join(destination_dir, image_name)
    task(os.path.join(source_dir, file), destination_file)


def copy_files(source, destination, files):
  for file in files:
    source_file = os.path.join(source, file)
    destination_file = os.path.join(destination, file)
    shutil.copy(source_file, destination_file)


def main():
  parser = argparse.ArgumentParser(description="Generate the minified Game Play HTML file")
  parser.add_argument("settings", help="settings file")
  options = parser.parse_args()

  source_dir = os.path.join(ROOT_DIR, "src")
  build_dir = os.path.join(ROOT_DIR, "build")
  archives_dir = os.path.join(ROOT_DIR, "archives")
  version_file = os.path.join(source_dir, "version.txt")
  sha_file = os.path.join(build_dir, "sha.txt")
  input_file = os.path.join(source_dir, "index.html")
  output_file = os.path.join(build_dir, "index.html")
  images_dir = os.path.join(source_dir, "images")
  assets_dir = os.path.join(source_dir, "assets")
  defaults_dir = os.path.join(source_dir, "defaults")
  manifest_file = os.path.join(build_dir, "cache.manifest")

  settings_file = os.path.abspath(options.settings)

  # Read the version.
  version = None
  with open(version_file, 'r') as f:
    version = f.read().strip()

  # Load the settings.
  settings = None
  with open(settings_file, 'r') as f:
    settings = json.load(f)
  settings["version"] = version

  # Create/empty the build directory.
  # We do not simply delete the directory so as not to break the development server which might be serving from here.
  if os.path.exists(build_dir):
    for path in os.listdir(build_dir):
      path = os.path.join(build_dir, path)
      if os.path.isfile(path):
        os.unlink(path)
      else:
        shutil.rmtree(path)
  else:
    os.mkdir(build_dir)

  # git sha
  sha = git_sha(repository=ROOT_DIR)
  with open(sha_file, "w") as f:
    f.write("%s\n" % sha)

  # index.html
  contents = None
  with open(input_file) as f:
    contents = f.read()
  html = lxml.html.fromstring(contents)

  print "Extracting JavaScript..."
  script = "window.config = %s;\n" % json.dumps(settings)
  script += extract_tags(html, "//script[@type='text/javascript']", "src", source_dir)
  if not settings["debug"]:
    print "Minifying JavaScript..."
    script = yuicompressor(script, '.js')
  append_javascript(html, script)

  print "Exctracting CSS..."
  style = extract_tags(html, "//link[@type='text/css']", "href", source_dir)
  if not settings["debug"]:
    print "Minifying CSS..."
    style = yuicompressor(style, '.css')
  append_style(html, style)

  contents = lxml.html.tostring(html)
  if not settings["debug"]:
    print "Compressing HTML..."
    contents = htmlcompressor(contents)

  print "Writing HTML..."
  with open(output_file, 'w') as f:
    f.write("<!DOCTYPE html>\n")
    f.write(contents)

  # images
  print "Copying images..."
  copy_diretory(images_dir, build_dir, pngcrush)

  # images
  print "Copying assets..."
  copy_diretory(assets_dir, build_dir)

  # defaults
  print "Copying defaults..."
  copy_diretory(defaults_dir, build_dir, pngcrush)

  # Build the game boy javascript.
  contents = build_javascript_files(source_dir, ["gbo/GameBoyIO.js",
                                                 "gbo/GameBoyCore.js",
                                                 "js/utilities.js",
                                                 "js/worker.js"])
  with open(os.path.join(build_dir, "worker.js"), 'w') as f:
    f.write(contents)

  # icon
  icon_file = os.path.join(ROOT_DIR, settings['icon'])
  pngcrush(icon_file, os.path.join(build_dir, "images", "icon.png"))

  # manifest
  manifest = find_files(build_dir)
  with open(manifest_file, 'w') as f:
    f.write("CACHE MANIFEST\n")
    f.write("# %s\n" % str(datetime.datetime.now()))
    f.write("CACHE:\n")
    f.write("\n".join(map(lambda x: x, manifest)))
    f.write("\n")
    f.write("NETWORK:\n")
    f.write("*\n")

  # We don't want the following files to be added to the manifest.
  copy_files(source_dir, build_dir, ["version.txt", "release.txt", "sizes.html"])

  # Archive the build.
  if not os.path.exists(archives_dir):
    os.makedirs(archives_dir)
  settings_name = os.path.splitext(os.path.basename(settings_file))[0]
  with Chdir(ROOT_DIR):
    subprocess.check_call(["tar", "-zcf", os.path.join(archives_dir, "build-%s-%s.tar.gz" % (sha, settings_name)), "build"])

if __name__ == '__main__':
  main()

#!/usr/bin/env python

import argparse
import datetime
import lxml.etree
import lxml.html
import os
import os.path
import shutil
import subprocess
import tempfile

def extract_javascript(html, root):
  scripts = ""
  transactions = html.xpath("//script[@type='text/javascript']")
  for transaction in transactions:
    src = os.path.join(root, transaction.get("src"))
    with open(src) as script:
      scripts = scripts + "\n" + script.read()
    transaction.drop_tree()

  filtered = ""
  for line in scripts.split("\n"):
    if line.find('"use strict";') != 0:
      filtered = filtered + "\n" + line

  return filtered

def extract_tags(html, tag, key, root):
  scripts = ""
  transactions = html.xpath(tag)
  for transaction in transactions:
    src = os.path.join(root, transaction.get(key))
    with open(src) as script:
      scripts = scripts + "\n" + script.read()
    transaction.drop_tree()
  return scripts

def append_javascript(html, script):
  body = html.find('body')
  source = "<script type='text/javascript' type='text/css'>" + script + "</script>"
  link = lxml.html.fromstring(source).find('.//script')
  body.append(link)

def append_style(html, style):
  head = html.find('head')
  tag = "<style>" + style + "</style>"
  style = lxml.html.fromstring(tag).find('.//style')
  head.append(style)

def yuicompressor(contents, suffix):
  temp = tempfile.mktemp(suffix=suffix)
  with open(temp, 'w') as f:
    f.write(contents)
  output = subprocess.check_output(['yuicompressor', temp])
  os.unlink(temp)
  return output

def htmlcompressor(contents):
  p = subprocess.Popen(['htmlcompressor'], stdout = subprocess.PIPE, stdin = subprocess.PIPE, stderr = subprocess.STDOUT)
  output = p.communicate(input = contents)[0]
  return output

def pngcrush(source_file, output_dir):
  name = os.path.basename(os.path.abspath(source_file))
  destination_file = os.path.join(output_dir, name)
  print "Crushing '%s'..." % source_file
  subprocess.check_call(['pngcrush', source_file, destination_file])

def list(directory):
  result = []
  for root, subdirs, files in os.walk(directory):
    for file in files:
      if file.find('.') != 0:
        result.append(os.path.relpath(os.path.join(root, file), directory))
  return result

def copy_image_directory(source_dir, output_dir):
  name = os.path.basename(os.path.abspath(source_dir))
  destination_dir = os.path.join(output_dir, name)
  os.mkdir(destination_dir)
  files = list(source_dir)
  for file in files:
    pngcrush(os.path.join(source_dir, file), destination_dir)

def main():
  parser = argparse.ArgumentParser(description = "Generate the minified Game Play HTML file")
  parser.add_argument("project", help = "root of the project")
  parser.add_argument("settings", help = "settings file")
  parser.add_argument("--debug", help = "Build without minifying files", action = "store_true", default = False)
  options = parser.parse_args()

  project_dir = os.path.abspath(options.project)
  source_dir = os.path.join(project_dir, "src")
  build_dir = os.path.join(project_dir, "build")
  input_file = os.path.join(source_dir, "index.html")
  output_file = os.path.join(build_dir, "index.html")
  images_dir = os.path.join(source_dir, "images")
  defaults_dir = os.path.join(source_dir, "defaults")
  manifest_file = os.path.join(build_dir, "cache.manifest")
  settings_dest = os.path.join(build_dir, "settings.json")
  sizes_file = os.path.join(source_dir, "sizes.html")
  sizes_dest = os.path.join(build_dir, "sizes.html")

  # build
  if os.path.exists(build_dir):
    shutil.rmtree(build_dir)
  os.mkdir(build_dir)

  # index.html
  contents = None
  with open(input_file) as f:
    contents = f.read()
  html = lxml.html.fromstring(contents)

  print "Extracting JavaScript..."
  script = extract_tags(html, "//script[@type='text/javascript']", "src", source_dir)
  if not options.debug:
    print "Minifying JavaScript..."
    script = yuicompressor(script, '.js')
  append_javascript(html, script)

  print "Exctracting CSS..."
  style = extract_tags(html, "//link[@type='text/css']", "href", source_dir)
  if not options.debug:
    print "Minifying CSS..."
    style = yuicompressor(style, '.css')
  append_style(html, style)

  contents = lxml.html.tostring(html)
  if not options.debug:
    print "Compressing HTML..."
    contents = htmlcompressor(contents)

  print "Writing HTML..."
  with open(output_file, 'w') as f:
    f.write("<!DOCTYPE html>\n");
    f.write(contents)

  # images
  print "Copying images..."
  copy_image_directory(images_dir, build_dir)
  
  # defaults
  print "Copying defaults..."
  copy_image_directory(defaults_dir, build_dir)

  # settings
  shutil.copy(options.settings, settings_dest)

  # manifest
  manifest = list(build_dir)
  with open(manifest_file, 'w') as f:
    f.write("CACHE MANIFEST\n")
    f.write("# %s\n" % str(datetime.datetime.now()))
    f.write("CACHE:\n")
    f.write("\n".join(map(lambda x: x, manifest)))
    f.write("\n")
    f.write("NETWORK:\n")
    f.write("*\n")

  # sizes
  shutil.copy(sizes_file, sizes_dest)

if __name__=='__main__':
  main()